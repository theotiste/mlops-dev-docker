name: Deploy • Build, Smoke test & Push to GHCR

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.png'
      - '**/*.jpg'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write   # nécessaire pour pousser sur GHCR

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/mlops-dev-docker-api
  DOCKERFILE: Dockerfile
  HOST_PORT: 5001     # port exposé sur le runner (hôte CI)
  APP_PORT: 5000      # port d'écoute de l'app dans le conteneur

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare image metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # tags produits :
          #   - "sha-<commit>" pour auditabilité
          #   - "latest" sur main uniquement
          tags: |
            type=raw,value=sha-${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # 1) Build local + load (pour tester)
      - name: Build (load for tests, no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          load: true
          push: false
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:ci-test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 2) Démarre le conteneur et attend qu'il soit prêt
      - name: Run container
        run: |
          docker run -d --rm \
            -p $HOST_PORT:$APP_PORT \
            --name mlops-api \
            "${{ env.IMAGE_NAME }}:ci-test-${{ github.sha }}"

          # Attente active du /health (max ~30s)
          for i in $(seq 1 60); do
            if curl -fsS "http://localhost:${HOST_PORT}/health" | grep -q '"ok":true'; then
              echo "Healthcheck OK"; break
            fi
            sleep 0.5
          done
          # Si pas OK, affiche logs conteneur et échoue
          if ! curl -fsS "http://localhost:${HOST_PORT}/health" | grep -q '"ok":true'; then
            echo "::error::Healthcheck failed"
            docker logs mlops-api || true
            exit 1
          fi

      # 3) Smoke tests fonctionnels (ex: /predict)
      - name: Smoke test - /predict
        run: |
          set -euo pipefail
          # Échantillon "B" (benign) de ton script
          read -r -d '' PAYLOAD << 'JSON'
          {"features":[13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259]}
          JSON

          RESP="$(curl -fsS -X POST "http://localhost:${HOST_PORT}/predict" \
            -H "Content-Type: application/json" \
            --data "${PAYLOAD}")"

          echo "Response: ${RESP}"

          # Vérifs minimales : JSON contient prediction + probability/probabilities
          echo "${RESP}" | grep -q '"prediction"' || { echo "::error::missing 'prediction'"; exit 1; }
          echo "${RESP}" | grep -Eq '"probability"|\"probabilities\"' || { echo "::error::missing probability/probabilities"; exit 1; }

      - name: Stop container
        if: always()
        run: docker rm -f mlops-api || true

      # 4) Login GHCR (avec GITHUB_TOKEN)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5) Build & push (utilise le cache du build de test)
      - name: Build & Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "### ✅ Build & push OK" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**:" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/,/\n/g' >> $GITHUB_STEP_SUMMARY
